{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyGameUI","text":"<p>A lightweight Python library that makes creating UI elements in Pygame quick and easy.</p> <p> </p>"},{"location":"#short-overview","title":"Short overview","text":"<p><code>PygameUI</code> is a small Python library written in Python that makes it easier to create UI elements like buttons, texts, inputs, and more when using the Python library PyGame. The library also supplies the user with many optional features for customizing the UI elements.</p> <p>(Hint: Feel free to \u2b50star\u2b50 the repo on github!)</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation in web form is available at https://trymbf.github.io/pygameui/</p> <p>Documentation in markdown form is available in the <code>docs</code> folder of the repository.   </p> <p>You can also download the documentation as a PDF file from the releases page</p>"},{"location":"#installation","title":"Installation","text":"<p>Start by downloading the PyGameUI python file from the releases page.</p> <p>Then place the PyGameUI file in the same folder as your project files.</p> <p></p> <p>(See the getting started guide for more details)</p>"},{"location":"#available-elements","title":"Available Elements","text":"<ul> <li>Element   The base class for all UI elements. It provides basic functionality such as setting position, drawing, and updating. Learn more!</li> <li>Text   A class for displaying text. It extends the <code>Element</code> class and adds text-specific attributes and methods. Learn more!</li> <li>Image   A class for displaying images. It extends the <code>Element</code> class and adds image-specific attributes and methods. Learn more!</li> <li>Input   A class for creating input fields. It extends the <code>Text</code> class and adds input-specific attributes and methods. Learn more!</li> <li>Button   A class for creating buttons. It extends the <code>Element</code> class and adds button-specific attributes and methods. Learn more!</li> <li>DropDownMenu   A class for creating dropdown menus. It extends the <code>Element</code> class and adds dropdown-specific attributes and methods. Learn more!</li> <li>CheckBox   A class for creating checkboxes. It extends the <code>Element</code> class and adds checkbox-specific attributes and methods. Learn more!</li> <li>Table   A class for creating tables. It extends the <code>Element</code> class and adds table-specific attributes and methods. Learn more!</li> <li>ProgressBar   A class for creating progress bars. It extends the <code>Element</code> class and adds progress bar-specific attributes and methods. Learn more!</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues</li> </ul>"},{"location":"#current-version","title":"Current Version","text":"<p>The current version of PygameUI is 2.2.1.</p>"},{"location":"#license","title":"License","text":"<p>PygameUI is open-source software.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides a comprehensive reference for all classes and methods in the PygameUI library.</p>"},{"location":"api-reference/#element","title":"Element","text":"<p>The base class for all UI components.</p>"},{"location":"api-reference/#constructor","title":"Constructor","text":"<pre><code>Element(\n    position: tuple[int, int],\n    width: int,\n    height: int,\n    color: tuple[int, int, int] = (255, 255, 255),\n    border_radius: int = 0,\n    border_color: tuple[int, int, int] = None,\n    border_width: int = 2,\n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods","title":"Methods","text":"Method Description <code>draw(surface: pygame.Surface) -&gt; None</code> Draws the element on the provided surface <code>update(events=None) -&gt; None</code> Updates the element's state including animations <code>move(x: int, y: int) -&gt; None</code> Moves the element by the specified amounts in x and y directions <code>set_position(position: tuple[int,int]) -&gt; None</code> Sets the position of the element <code>set_framerate(framerate: int) -&gt; None</code> Sets the framerate for animations <code>set_display(display: bool) -&gt; None</code> Sets display status (visible/hidden) <code>set_color(color: tuple[int, int, int]) -&gt; None</code> Sets the element's color <code>set_border_radius(radius: int) -&gt; None</code> Sets the border radius <code>set_animate(state: bool) -&gt; None</code> Enables/disables animation <code>get_position() -&gt; tuple[int, int]</code> Gets the current position <code>get_display() -&gt; bool</code> Gets display status <code>get_animation_state() -&gt; bool</code> Gets animation status <code>toggle_display() -&gt; None</code> Toggles display status <code>flow(start_position, end_position, time, loop=False) -&gt; None</code> Sets up smooth animation <code>jump(start_position, end_position, time, loop=False, ratio=1) -&gt; None</code> Sets up teleporting animation <code>is_hovered() -&gt; bool</code> Checks if mouse is hovering over the element <code>is_clicked(button: int = 0) -&gt; bool</code> Checks if element is being clicked <code>was_clicked(button: int = 0) -&gt; bool</code> Checks if element was clicked and released"},{"location":"api-reference/#text","title":"Text","text":"<p>Text display component.</p>"},{"location":"api-reference/#constructor_1","title":"Constructor","text":"<pre><code>Text(\n    position: tuple[int, int],\n    content: str,\n    color: tuple[int, int, int] = (255, 255, 255),\n    font_size: int = 20,\n    font_family: str = \"Arial\",\n    width: int = 0,\n    height: int = 0,\n    anti_aliasing: bool = True,\n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods_1","title":"Methods","text":"<p>Inherits all methods from Element, plus:</p> Method Description <code>set_content(content: str) -&gt; None</code> Sets the displayed text <code>set_color(color: tuple[int, int, int]) -&gt; None</code> Sets the text color <code>set_font_size(font_size: int) -&gt; None</code> Sets the font size <code>set_font_family(font_family: str) -&gt; None</code> Sets the font family <code>get_content() -&gt; str</code> Gets the current text"},{"location":"api-reference/#button","title":"Button","text":"<p>Interactive button component.</p>"},{"location":"api-reference/#constructor_2","title":"Constructor","text":"<pre><code>Button(\n    position: tuple[int, int],\n    width: int = 200,\n    height: int = 50,\n    border_radius: int = 10,\n    border_color: tuple[int, int, int] = None,\n    border_width: int = 2,\n    label: str = \"Click me.\",\n    color: tuple[int, int, int] = (255, 255, 255),\n    hover_color: tuple[int, int, int] = (200, 200, 200),\n    click_color: tuple[int, int, int] = (150, 150, 150),\n    text_color: tuple[int, int, int] = (100, 100, 100),\n    text_hover_color: tuple[int, int, int] = (0, 0, 0),\n    text_click_color: tuple[int, int, int] = (0, 0, 0),\n    font_size: int = 20,\n    font_family: str = \"Arial\",\n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods_2","title":"Methods","text":"<p>Inherits all methods from Element, plus:</p> Method Description <code>set_label(label: str) -&gt; None</code> Sets the button text <code>set_color(color: tuple[int, int, int]) -&gt; None</code> Sets the default color <code>set_hover_color(color: tuple[int, int, int]) -&gt; None</code> Sets the hover color <code>set_click_color(color: tuple[int, int, int]) -&gt; None</code> Sets the click color <code>set_text_color(color: tuple[int, int, int]) -&gt; None</code> Sets the text color <code>set_text_hover_color(color: tuple[int, int, int]) -&gt; None</code> Sets the text hover color <code>set_text_click_color(color: tuple[int, int, int]) -&gt; None</code> Sets the text click color"},{"location":"api-reference/#image","title":"Image","text":"<p>Image display component.</p>"},{"location":"api-reference/#constructor_3","title":"Constructor","text":"<pre><code>Image(\n    position: tuple[int, int],\n    src: str,\n    width: int = 0,\n    height: int = 0,\n    scale: int = 1,\n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods_3","title":"Methods","text":"<p>Inherits all methods from Element, plus:</p> Method Description <code>set_image(src: str) -&gt; None</code> Changes the image source <code>scale(scale: int) -&gt; None</code> Changes the image scale <code>get_image() -&gt; pygame.Surface</code> Gets the image surface <code>get_scale() -&gt; int</code> Gets the current scale"},{"location":"api-reference/#input","title":"Input","text":"<p>Text input field component.</p>"},{"location":"api-reference/#constructor_4","title":"Constructor","text":"<pre><code>Input(\n    position: tuple[int, int],\n    width: int = 200,\n    height: int = 50,\n    passive_text_color: tuple[int, int, int] = (150, 150, 150),\n    active_text_color: tuple[int, int, int] = (255, 255, 255),\n    passive_border_color: tuple[int, int, int] = (100, 100, 100),\n    active_border_color: tuple[int, int, int] = (200, 200, 200),\n    border_radius: int = 0,\n    border_width: int = 2,\n    font_size: int = 20,\n    font_family: str = \"Arial\",\n    hint: str = \"\",\n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods_4","title":"Methods","text":"<p>Inherits all methods from Text, plus:</p> Method Description <code>set_max_length(max_length: int) -&gt; None</code> Sets maximum text length <code>set_filter(filter: str, only_allow_filter: bool = False) -&gt; None</code> Sets character filter <code>set_hint(hint: str) -&gt; None</code> Sets hint text <code>set_value(value: str) -&gt; None</code> Sets the current text value <code>get_value() -&gt; str</code> Gets the current text value"},{"location":"api-reference/#checkbox","title":"Checkbox","text":"<p>Toggle component with various styles.</p>"},{"location":"api-reference/#constructor_5","title":"Constructor","text":"<pre><code>Checkbox(\n    position: tuple[int, int],\n    width: int = 50,\n    height: int = 50,\n    style: Literal[\"checkmark\", \"cross\", \"circle\", \"square\", \"none\"] = \"checkmark\",\n    unchecked_style: Literal[\"checkmark\", \"cross\", \"circle\", \"square\", \"none\"] = \"none\",\n    mark_width: int = 5,\n    color: tuple[int, int, int] = (100, 255, 100),\n    background_color: tuple[int, int, int] = (200, 200, 200),\n    border_radius: int = 0,\n    border_color: tuple[int, int, int] = (0, 0, 0),\n    border_width: int = 2,\n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods_5","title":"Methods","text":"<p>Inherits all methods from Element, plus:</p> Method Description <code>set_checked(checked: bool) -&gt; None</code> Sets the checked state <code>disable() -&gt; None</code> Disables the checkbox <code>enable() -&gt; None</code> Enables the checkbox <code>is_checked() -&gt; bool</code> Gets the current checked state <code>is_enabled() -&gt; bool</code> Gets the enabled state"},{"location":"api-reference/#progressbar","title":"ProgressBar","text":"<p>Progress indicator component.</p>"},{"location":"api-reference/#constructor_6","title":"Constructor","text":"<pre><code>ProgressBar(\n    position: tuple[int, int],\n    width: int = 200,\n    height: int = 50,\n    progress: int = 0,\n    max_progress: int = 100,\n    min_progress: int = 0,\n    color: tuple[int, int, int] = (150, 255, 150),\n    background_color: tuple[int, int, int] = (100, 100, 100),\n    border_radius: int = 0,\n    border_color: tuple[int, int, int] = (200, 200, 200),\n    border_width: int = 2,\n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods_6","title":"Methods","text":"<p>Inherits all methods from Element, plus:</p> Method Description <code>set_progress(progress: int) -&gt; None</code> Sets the progress value <code>set_max_progress(max_progress: int) -&gt; None</code> Sets the maximum progress <code>set_min_progress(min_progress: int) -&gt; None</code> Sets the minimum progress <code>change_progress(amount: int) -&gt; None</code> Changes progress by amount <code>get_progress() -&gt; int</code> Gets the current progress"},{"location":"api-reference/#dropdownmenu","title":"DropdownMenu","text":"<p>Menu with selectable options.</p>"},{"location":"api-reference/#constructor_7","title":"Constructor","text":"<pre><code>DropdownMenu(\n    position: tuple[int, int],\n    width: int = 200,\n    height: int = 50,\n    options: list[str],\n    on_change: callable = None,\n    element_width: int = 200,\n    element_height: int = 50,  \n    element_spacing: int = 2,\n    max_elements_per_column: int = 5,\n    wrap_reverse: bool = False,\n    color: tuple[int, int, int] = (255, 255, 255),\n    hover_color: tuple[int, int, int] = (200, 200, 200),\n    click_color: tuple[int, int, int] = (150, 150, 150),\n    font_size: int = 20,\n    font_family: str = \"Arial\",\n    text_color: tuple[int, int, int] = (0, 0, 0),\n    text_hover_color: tuple[int, int, int] = (0, 0, 0),\n    text_click_color: tuple[int, int, int] = (0, 0, 0),\n    selected_option_color: tuple[int, int, int] = (200, 200, 200),\n    selected_option_hover_color: tuple[int, int, int] = (150, 150, 150),\n    selected_option_click_color: tuple[int, int, int] = (100, 100, 100),\n    selected_option_text_color: tuple[int, int, int] = (0, 0, 0),\n    selected_option_text_hover_color: tuple[int, int, int] = (0, 0, 0),\n    selected_option_text_click_color: tuple[int, int, int] = (0, 0, 0),\n    border_radius: int = 0,\n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods_7","title":"Methods","text":"<p>Inherits all methods from Element, plus:</p> Method Description <code>set_options(options: list[str]) -&gt; None</code> Sets the dropdown options <code>set_selected_option(option: str) -&gt; None</code> Sets selected option by value <code>set_selected_index(index: int) -&gt; None</code> Sets selected option by index <code>get_selected_option() -&gt; str</code> Gets selected option value <code>get_selected_index() -&gt; int</code> Gets selected option index <code>get_options() -&gt; list[str]</code> Gets all options"},{"location":"api-reference/#table","title":"Table","text":"<p>Grid-based data display component.</p>"},{"location":"api-reference/#constructor_8","title":"Constructor","text":"<pre><code>Table(\n    position: tuple[int, int],\n    content: list[list[str]], \n    width: int = 200, \n    height: int = 50, \n    color: tuple[int, int, int] = (255, 255, 255),\n    hover_color: tuple[int, int, int] = (200, 200, 200),\n    text_color: tuple[int, int, int] = (0, 0, 0),\n    border_color: tuple[int, int, int] = (200, 200, 200),\n    border_width: int = 2,\n    border_radius: int = 0, \n    centered: bool = False\n)\n</code></pre>"},{"location":"api-reference/#methods_8","title":"Methods","text":"<p>Inherits all methods from Element, plus:</p> Method Description <code>set_content(content: list[list[str]]) -&gt; None</code> Updates table content"},{"location":"getting-started/","title":"Getting Started with PygameUI","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li> <p>Start by downloading the latest PygameUI Python file from the releases page.</p> </li> <li> <p>Place the <code>pygameui.py</code> file in the same folder as your project files. </p> </li> <li> <p>Import the library in your project: <pre><code>import pygame\nimport pygameui\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#basic-structure","title":"Basic Structure","text":"<p>Every PygameUI application follows this basic structure:</p> <pre><code>import pygame\nimport pygameui\n\n# Initialize\npygame.init()\nscreen = pygame.display.set_mode((800, 600)) # Set your own width and height\n\n# Create UI elements\nui_element = pygameui.Element(\n    position=(250, 250),  # x, y coordinates\n    width=200,\n    height=50\n)\n\n# Control framerate\nclock = pygame.time.Clock()\n\n# Main loop\nrunning = True\nwhile running:\n    # Handle events\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Reset screen\n    screen.fill((0, 0, 0))  # Black background\n\n    # Update element, moves, checks actions etc\n    ui_element.update(events)  # Pass events to the update method\n\n    # Draw element on screen\n    ui_element.draw(screen)\n\n    # Update pygame display\n    pygame.display.flip()\n\n    # Run at 60 frames per second\n    clock.tick(60)\n</code></pre>"},{"location":"getting-started/#example-creating-text","title":"Example: Creating Text","text":"<p>First create a text object:</p> <pre><code>my_text = pygameui.Text(\n    position=(100, 100),\n    content=\"Hello World\", \n    font_size=30, \n    color=(255, 255, 255)  # White color\n)\n</code></pre> <p>And then in the main loop, call:</p> <pre><code># Pass events to update method for UI elements that need them\nmy_text.update(events)\nmy_text.draw(screen)\n</code></pre> <p>That's it! You now have a text object on your screen. You can customize the text by changing its properties like <code>font_size</code>, <code>color</code>, and <code>position</code>. See the Text class documentation for more details.</p>"},{"location":"getting-started/#creating-interactive-elements","title":"Creating Interactive Elements","text":"<p>For interactive elements like buttons or inputs, you need to pass the events list to the update method:</p> <pre><code># Create a button\nmy_button = pygameui.Button(\n    position=(400, 300),\n    width=200,\n    height=50,\n    label=\"Click Me!\",\n    color=(100, 100, 255)  # Light blue color\n)\n\n# In the main loop\nmy_button.update(events)\nmy_button.draw(screen)\n\n# Check if button was clicked\nif my_button.was_clicked():\n    print(\"Button was clicked!\")\n</code></pre>"},{"location":"getting-started/#animation","title":"Animation","text":"<p>PygameUI makes it easy to animate UI elements:</p> <pre><code># Set up a button that flows back and forth\nanimated_button = pygameui.Button(\n    position=(400, 200),\n    width=200,\n    height=50,\n    label=\"Animated Button\"\n)\n\n# Create a flowing animation between two positions\nanimated_button.flow(\n    start_position=(200, 200),\n    end_position=(600, 200),\n    time=1000,  # 1000ms (1 second)\n    loop=True   # Loop the animation continuously\n)\n\n# Enable animation\nanimated_button.set_animate(True)\n</code></pre> <p>To add more UI elements, simply create more instances of the appropriate classes and follow the same pattern. See the specific component documentation pages for details on each element type.</p>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore more components to see what PygameUI can do.</li> <li>Check out the examples to see PygameUI in action.</li> <li>Read the API documentation for detailed information on each class and method.</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This guide addresses common issues you might encounter when using PygameUI and provides solutions.</p>"},{"location":"troubleshooting/#component-interaction-issues","title":"Component Interaction Issues","text":""},{"location":"troubleshooting/#components-not-responding-to-clicks","title":"Components Not Responding to Clicks","text":"<ol> <li>Z-Order Issues: Components might be overlapping. Ensure your draw order is correct:</li> </ol> <pre><code># Draw in the correct order (bottom to top)\nbackground.draw(screen)\nbutton1.draw(screen)\nbutton2.draw(screen)  # This will appear on top\n</code></pre> <ol> <li>Position Check: Verify that components are positioned within the visible area of the screen.</li> </ol>"},{"location":"troubleshooting/#input-fields-not-accepting-text","title":"Input Fields Not Accepting Text","text":"<p>Issue: Input components don't register keystrokes.</p> <p>Solutions:</p> <ol> <li> <p>Active State: The input field must be activated by clicking on it first.</p> </li> <li> <p>Events Handling: Make sure you'  re passing events to the input component:</p> </li> </ol> <pre><code>events = pygame.event.get()\nmy_input.update(events)\n</code></pre> <ol> <li>Filter Settings: Check if you've set a filter that might be blocking the characters:</li> </ol> <pre><code># Remove any restrictive filters\nmy_input.set_filter(\"\", only_allow_filter=False)\n</code></pre>"},{"location":"troubleshooting/#rendering-issues","title":"Rendering Issues","text":""},{"location":"troubleshooting/#components-not-displaying-correctly","title":"Components Not Displaying Correctly","text":"<p>Issue: Components appear with wrong sizes, colors, or don't display at all.</p> <p>Solutions:</p> <ol> <li>Display Setting: Check if the component's display property is enabled:</li> </ol> <pre><code>my_component.set_display(True)\n</code></pre> <ol> <li>Draw Call: Ensure you're calling the draw method for each component:</li> </ol> <pre><code>my_component.draw(screen)\n</code></pre> <ol> <li>Screen Updates: Make sure you're updating the screen after drawing:</li> </ol> <pre><code>pygame.display.flip()  # or pygame.display.update()\n</code></pre> <ol> <li>Color Format: Ensure colors are valid RGB tuples with values between 0-255:</li> </ol> <pre><code># Correct: RGB tuple\nmy_component.set_color((255, 100, 100))\n\n# Incorrect: values out of range or wrong format\n# my_component.set_color((300, 100, 100))  # Values &gt; 255\n# my_component.set_color(\"#FF0000\")  # Wrong format\n</code></pre>"},{"location":"troubleshooting/#text-rendering-problems","title":"Text Rendering Problems","text":"<p>Issue: Text appears blurry, wrong size, or doesn't show up.</p> <p>Solutions:</p> <ol> <li> <p>Font Availability: Make sure the specified font family is installed on your system.</p> </li> <li> <p>Anti-aliasing: Try toggling anti-aliasing:</p> </li> </ol> <pre><code>my_text = pygameui.Text(\n    position=(100, 100),\n    content=\"Hello World\",\n    anti_aliasing=True  # or False\n)\n</code></pre> <ol> <li>Size Issues: If text is too small or large, adjust the font size:</li> </ol> <pre><code>my_text.set_font_size(24)  # Adjust as needed\n</code></pre>"},{"location":"troubleshooting/#animation-problems","title":"Animation Problems","text":""},{"location":"troubleshooting/#animations-not-working","title":"Animations Not Working","text":"<p>Issue: Flow or jump animations don't run.</p> <p>Solutions:</p> <ol> <li>Animation State: Make sure animation is enabled:</li> </ol> <pre><code>my_element.set_animate(True)\n</code></pre> <ol> <li>Update Call: Ensure you're calling update in your game loop:</li> </ol> <pre><code>my_element.update(events)\n</code></pre> <ol> <li>Position Override: Check that you're not setting the position manually after setting up animations:</li> </ol> <pre><code># This will override your animation:\n# my_element.set_position((100, 100))\n</code></pre> <ol> <li>Animation Setup: Verify that animation parameters are correct:</li> </ol> <pre><code># For flow animation:\nmy_element.flow(\n    start_position=(100, 100),\n    end_position=(300, 100),\n    time=1000,  # milliseconds\n    loop=True\n)\n</code></pre>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-frame-rate","title":"Slow Frame Rate","text":"<p>Issue: The application becomes slow when using multiple components.</p> <p>Solutions:</p> <ol> <li>Optimize Updates: Only update visible or active components:</li> </ol> <pre><code># Only update visible components\nfor component in components:\n    if component.get_display():\n        component.update(events)\n</code></pre> <ol> <li> <p>Reduce Animation: Limit the number of animated components.</p> </li> <li> <p>Simplify Rendering: Use simpler shapes or smaller images where possible.</p> </li> <li> <p>Text Caching: For static text, consider creating it once and reusing:</p> </li> </ol> <pre><code># Create once\nmy_text = pygameui.Text(position=(100, 100), content=\"Static Text\")\n\n# In the game loop\nmy_text.draw(screen)  # Just draw, no need to update static text\n</code></pre>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#module-not-found","title":"Module Not Found","text":"<p>Issue: <code>ImportError: No module named 'pygameui'</code></p> <p>Solutions:</p> <ol> <li> <p>File Location: Make sure pygameui.py is in the same directory as your project.</p> </li> <li> <p>Running path: Check that you're running your script from the correct directory. If you're using an IDE, ensure the working directory is set to where pygameui.py is located.</p> </li> <li> <p>Initialization: Check that you've imported it correctly:</p> </li> </ol> <pre><code>import pygameui  # Not 'from pygameui import ...'\n</code></pre>"},{"location":"troubleshooting/#additional-help","title":"Additional Help","text":"<p>If you're still experiencing issues after trying these solutions:</p> <ol> <li> <p>Check Examples: Look at the example code to see working implementations.</p> </li> <li> <p>Review Documentation: Make sure you're using the components as described in the documentation.</p> </li> <li> <p>GitHub Issues: Check existing issues or create a new one with a detailed description of your problem.</p> </li> </ol>"},{"location":"components/","title":"Components","text":"<p>PygameUI provides a variety of UI components to build interactive interfaces for your Pygame applications. All components share a common update-draw pattern and inherit from the base Element class.</p>"},{"location":"components/#component-hierarchy","title":"Component Hierarchy","text":"<pre><code>Element\n\u251c\u2500\u2500 Text\n\u2502   \u2514\u2500\u2500 Input\n\u251c\u2500\u2500 Button\n\u251c\u2500\u2500 Image\n\u251c\u2500\u2500 Checkbox\n\u251c\u2500\u2500 ProgressBar\n\u251c\u2500\u2500 DropdownMenu\n\u2514\u2500\u2500 Table\n</code></pre>"},{"location":"components/#component-categories","title":"Component Categories","text":""},{"location":"components/#basic-components","title":"Basic Components","text":"<ul> <li>Element - The foundation for all UI components with positioning, drawing, and animation capabilities</li> <li>Text - Display text with customizable fonts, colors, and sizes</li> <li>Image - Display and manipulate images with scaling and positioning options</li> </ul>"},{"location":"components/#interactive-components","title":"Interactive Components","text":"<ul> <li>Button - Clickable buttons with hover and pressed states</li> <li>Input - Text input fields with filtering and validation</li> <li>Checkbox - Toggle controls with various visual styles</li> <li>DropdownMenu - Selectable dropdown lists with customizable options</li> </ul>"},{"location":"components/#data-display-components","title":"Data Display Components","text":"<ul> <li>ProgressBar - Visual indicators for progress or completion status</li> <li>Table - Grid-based data display for structured information</li> </ul>"},{"location":"components/#common-features","title":"Common Features","text":"<p>All components share these common features:</p> <ul> <li>Positioning: Set position with optional centering</li> <li>Styling: Customize colors, borders, and other visual aspects</li> <li>Events: Handle mouse interactions and clicks</li> <li>Animation: Apply built-in animations or create custom ones</li> <li>Visibility: Toggle display on/off</li> </ul>"},{"location":"components/#getting-started-with-components","title":"Getting Started with Components","text":"<p>For a comprehensive overview of how components work together, see the Components Overview guide.</p> <p>For practical examples using these components, check out the Examples section.</p>"},{"location":"components/button/","title":"Button","text":"<p>Buttons provide clickable interface elements with hover effects.</p>"},{"location":"components/button/#basic-usage","title":"Basic Usage","text":"<pre><code>button = pygameui.Button(\n    position=(100, 100),\n    label=\"Click me.\",\n    width=200,\n    height=50\n)\n\n# In the main loop\nbutton.update(events)  # Pass events list for proper interaction handling\nbutton.draw(screen)\n\n# Check for clicks\nif button.was_clicked():\n    print(\"Button was clicked!\")\n</code></pre>"},{"location":"components/button/#properties","title":"Properties","text":"<pre><code>position: tuple[int, int],\nwidth: int = 200,\nheight: int = 50,\nborder_radius: int = 10,\nborder_color: tuple[int, int, int] = None,\nborder_width: int = 2,\nlabel: str = \"Click me.\",\ncolor: tuple[int, int, int] = (255, 255, 255),\nhover_color: tuple[int, int, int] = (200, 200, 200),\nclick_color: tuple[int, int, int] = (150, 150, 150),\ntext_color: tuple[int, int, int] = (100, 100, 100),\ntext_hover_color: tuple[int, int, int] = (0, 0, 0),\ntext_click_color: tuple[int, int, int] = (0, 0, 0),\nfont_size: int = 20,\nfont_family: str = \"Arial\",\ncentered: bool = False\n</code></pre> <ul> <li><code>position</code>: Tuple of (x, y) coordinates</li> <li><code>width</code>: Width of the button</li> <li><code>height</code>: Height of the button</li> <li><code>border_radius</code>: Radius for rounded corners</li> <li><code>border_color</code>: Color of the button border, if None, the border will not be drawn</li> <li><code>border_width</code>: Width of the button border</li> <li><code>label</code>: Text displayed on the button</li> <li><code>color</code>: Default button background color</li> <li><code>hover_color</code>: Background color when the button is hovered over</li> <li><code>click_color</code>: Background color when the button is clicked</li> <li><code>text_color</code>: Color of the text when not hovered</li> <li><code>text_hover_color</code>: Color of the text when hovered over</li> <li><code>text_click_color</code>: Color of the text when clicked</li> <li><code>font_size</code>: Size of the text font</li> <li><code>font_family</code>: Font family for the text</li> <li><code>centered</code>: If True, the button is centered on the provided position</li> </ul>"},{"location":"components/button/#methods","title":"Methods","text":"<p>All methods inherited from the Element class.</p>"},{"location":"components/button/#update-method","title":"Update Method","text":"<pre><code>update(events=None) -&gt; None\n</code></pre> <ul> <li><code>update</code>: Updates the button state based on mouse interaction and animations.   The <code>events</code> parameter should be a list of pygame events, though it's not used directly by the Button class.   Calling this method is essential for proper button interaction and animation handling.</li> </ul>"},{"location":"components/button/#setters","title":"Setters","text":"<pre><code>set_label(label: str) -&gt; None\nset_color(color: tuple[int, int, int]) -&gt; None\nset_hover_color(color: tuple[int, int, int]) -&gt; None\nset_click_color(color: tuple[int, int, int]) -&gt; None\nset_text_color(color: tuple[int, int, int]) -&gt; None\nset_text_hover_color(color: tuple[int, int, int]) -&gt; None\nset_text_click_color(color: tuple[int, int, int]) -&gt; None\n</code></pre> <ul> <li><code>set_label</code>: Set the text displayed on the button</li> <li><code>set_color</code>: Set the default button background color</li> <li><code>set_hover_color</code>: Set the background color when the button is hovered over</li> <li><code>set_click_color</code>: Set the background color when the button is clicked</li> <li><code>set_text_color</code>: Set the color of the button label when not hovered</li> <li><code>set_text_hover_color</code>: Set the color of the button label when hovered over</li> <li><code>set_text_click_color</code>: Set the color of the button label when clicked</li> </ul>"},{"location":"components/button/#mouse-interaction-methods","title":"Mouse Interaction Methods","text":"<pre><code>is_hovered() -&gt; bool\nis_clicked(button: int = 0) -&gt; bool\nwas_clicked(button: int = 0) -&gt; bool\n</code></pre> <ul> <li><code>is_hovered</code>: Check if the mouse is currently hovering over the button</li> <li><code>is_clicked</code>: Check if the button is currently being pressed (mouse button held down)</li> <li><code>was_clicked</code>: Check if the button was clicked (mouse pressed and released on the button)   For all mouse methods, the <code>button</code> parameter specifies which mouse button to check (0=left, 1=middle, 2=right)</li> </ul>"},{"location":"components/checkbox/","title":"Checkbox","text":"<p>Checkboxes provide toggleable interface elements with various styles for indicating selection state.</p>"},{"location":"components/checkbox/#basic-usage","title":"Basic Usage","text":"<pre><code>checkbox = pygameui.Checkbox(\n    position=(100, 100),\n    width=50,\n    height=50,\n    style=\"checkmark\",\n    background_color=(220, 220, 220)\n)\n\n# In the main loop\ncheckbox.update(events)  # events parameter for API consistency\ncheckbox.draw(screen)\n\n# Check the checkbox state\nif checkbox.is_checked():\n    print(\"Checkbox is checked!\")\n</code></pre>"},{"location":"components/checkbox/#properties","title":"Properties","text":"<pre><code>position: tuple[int, int],\nwidth: int = 50,\nheight: int = 50,\nstyle: Literal[\"checkmark\", \"cross\", \"circle\", \"square\", \"none\"] = \"checkmark\",\nunchecked_style: Literal[\"checkmark\", \"cross\", \"circle\", \"square\", \"none\"] = \"none\",\nmark_width: int = 5,\ncolor: tuple[int, int, int] = (100, 255, 100),\nbackground_color: tuple[int, int, int] = (200, 200, 200),\nborder_radius: int = 0,\nborder_color: tuple[int, int, int] = (0, 0, 0),\nborder_width: int = 2,\ncentered: bool = False\n</code></pre> <ul> <li><code>position</code>: Tuple of (x, y) coordinates</li> <li><code>width</code>: Width of the checkbox</li> <li><code>height</code>: Height of the checkbox</li> <li><code>style</code>: The style of mark when checked (\"checkmark\", \"cross\", \"circle\", \"square\", or \"none\")</li> <li><code>unchecked_style</code>: The style of mark when unchecked (\"checkmark\", \"cross\", \"circle\", \"square\", or \"none\")</li> <li><code>mark_width</code>: Width of the mark lines/borders</li> <li><code>color</code>: Color of the mark</li> <li><code>background_color</code>: Color of the checkbox background</li> <li><code>border_radius</code>: Radius for rounded corners</li> <li><code>border_color</code>: Color of the checkbox border</li> <li><code>border_width</code>: Width of the border</li> <li><code>centered</code>: If True, the checkbox is centered on the provided position</li> </ul>"},{"location":"components/checkbox/#methods","title":"Methods","text":"<p>All methods inherited from the Element class, plus:</p>"},{"location":"components/checkbox/#setters","title":"Setters","text":"<pre><code>set_checked(checked: bool) -&gt; None\ndisable() -&gt; None\nenable() -&gt; None\n</code></pre> <ul> <li><code>set_checked</code>: Set the checked state of the checkbox</li> <li><code>disable</code>: Disable the checkbox, preventing user interaction</li> <li><code>enable</code>: Enable the checkbox, allowing user interaction</li> </ul>"},{"location":"components/checkbox/#getters","title":"Getters","text":"<pre><code>is_checked() -&gt; bool\nis_enabled() -&gt; bool\n</code></pre> <ul> <li><code>is_checked</code>: Get the current checked state of the checkbox</li> <li><code>is_enabled</code>: Get whether the checkbox is currently enabled</li> </ul>"},{"location":"components/checkbox/#example","title":"Example","text":"<p>Simple example demonstrating different checkbox styles and interactions.</p> <pre><code>import pygame\nimport pygameui\n\n# Initialize\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n\n# Create checkboxes with different styles\ncheckmark_box = pygameui.Checkbox(\n    position=(200, 200),\n    style=\"checkmark\",\n    color=(50, 200, 50),  # Green mark\n    width=40,\n    height=40,\n    centered=True\n)\n\ncross_box = pygameui.Checkbox(\n    position=(300, 200),\n    style=\"cross\",\n    color=(200, 50, 50),  # Red mark\n    width=40,\n    height=40,\n    centered=True\n)\n\ncircle_box = pygameui.Checkbox(\n    position=(400, 200),\n    style=\"circle\",\n    color=(50, 50, 200),  # Blue mark\n    width=40,\n    height=40,\n    centered=True\n)\n\nsquare_box = pygameui.Checkbox(\n    position=(500, 200),\n    style=\"square\",\n    color=(200, 200, 50),  # Yellow mark\n    width=40,\n    height=40,\n    centered=True\n)\n\n# Text labels for checkboxes\ncheckbox_labels = [\n    pygameui.Text((200, 250), \"Checkmark\", (255, 255, 255), centered=True),\n    pygameui.Text((300, 250), \"Cross\", (255, 255, 255), centered=True),\n    pygameui.Text((400, 250), \"Circle\", (255, 255, 255), centered=True),\n    pygameui.Text((500, 250), \"Square\", (255, 255, 255), centered=True)\n]\n\n# Main loop\nrunning = True\nwhile running:\n    # Handle events\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Reset screen\n    screen.fill((30, 30, 30))  # Dark background\n\n    # Update checkboxes with events for proper interaction\n    checkboxes = [checkmark_box, cross_box, circle_box, square_box]\n    for checkbox in checkboxes:\n        checkbox.update(events)\n\n        # Display status for each checkbox\n        if checkbox.is_checked():\n            status_text = f\"{checkbox._checked_style} is ON\"\n        else:\n            status_text = f\"{checkbox._checked_style} is OFF\"\n\n        # Draw checkboxes and status\n        checkbox.draw(screen)\n\n    # Draw labels\n    for label in checkbox_labels:\n        label.update()\n        label.draw(screen)\n\n    # Display instructions\n    instructions = pygameui.Text(\n        (400, 100), \n        \"Click on checkboxes to toggle them\", \n        (200, 200, 200),\n        font_size=24,\n        centered=True\n    )\n    instructions.update()\n    instructions.draw(screen)\n\n    # Update display\n    pygame.display.flip()\n    clock.tick(60)\n</code></pre>"},{"location":"components/dropdown-menu/","title":"DropdownMenu","text":"<p>The <code>DropdownMenu</code> provides a dropdown interface for selecting one option from a list of choices. It supports customizable colors, text styles, and the ability to wrap options into multiple columns.</p>"},{"location":"components/dropdown-menu/#basic-usage","title":"Basic Usage","text":"<pre><code># Create a dropdown menu\ndropdown = pygameui.DropdownMenu(\n    position=(100, 100),\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    width=200,\n    height=50\n)\n\n# In the main loop\nevents = pygame.event.get()\ndropdown.update(events)  # Pass events for proper interaction\ndropdown.draw(screen)\n\n# Get the selected option\nselected_option = dropdown.get_selected_option()\n</code></pre>"},{"location":"components/dropdown-menu/#properties","title":"Properties","text":"<pre><code>position: tuple[int, int],\nwidth: int = 200,\nheight: int = 50,\noptions: list[str],\non_change: callable = None,\nelement_width: int = 200,\nelement_height: int = 50,  \nelement_spacing: int = 2,\nmax_elements_per_column: int = 5,\nwrap_reverse: bool = False,\ncolor: tuple[int, int, int] = (255, 255, 255),\nhover_color: tuple[int, int, int] = (200, 200, 200),\nclick_color: tuple[int, int, int] = (150, 150, 150),\nfont_size: int = 20,\nfont_family: str = \"Arial\",\ntext_color: tuple[int, int, int] = (0, 0, 0),\ntext_hover_color: tuple[int, int, int] = (0, 0, 0),\ntext_click_color: tuple[int, int, int] = (0, 0, 0),\nselected_option_color: tuple[int, int, int] = (200, 200, 200),\nselected_option_hover_color: tuple[int, int, int] = (150, 150, 150),\nselected_option_click_color: tuple[int, int, int] = (100, 100, 100),\nselected_option_text_color: tuple[int, int, int] = (0, 0, 0),\nselected_option_text_hover_color: tuple[int, int, int] = (0, 0, 0),\nselected_option_text_click_color: tuple[int, int, int] = (0, 0, 0),\nborder_radius: int = 0,\ncentered: bool = False\n</code></pre> <ul> <li><code>position</code>: Tuple of (x, y) coordinates</li> <li><code>width</code>: Width of the dropdown menu main button</li> <li><code>height</code>: Height of the dropdown menu main button</li> <li><code>options</code>: List of strings representing the dropdown options</li> <li><code>on_change</code>: Function called when the selected option changes</li> <li><code>element_width</code>: Width of each option button in the dropdown</li> <li><code>element_height</code>: Height of each option button in the dropdown</li> <li><code>element_spacing</code>: Spacing between option buttons</li> <li><code>max_elements_per_column</code>: Maximum number of options per column before wrapping</li> <li><code>wrap_reverse</code>: If True, wraps options in reverse order</li> <li><code>color</code>: Default background color of the option buttons</li> <li><code>hover_color</code>: Background color when an option is hovered over</li> <li><code>click_color</code>: Background color when an option is clicked</li> <li><code>font_size</code>: Size of the text font</li> <li><code>font_family</code>: Font family used for text</li> <li><code>text_color</code>: Default text color</li> <li><code>text_hover_color</code>: Text color when hovered over</li> <li><code>text_click_color</code>: Text color when clicked</li> <li><code>selected_option_color</code>: Background color of the main button</li> <li><code>selected_option_hover_color</code>: Background color of the main button when hovered</li> <li><code>selected_option_click_color</code>: Background color of the main button when clicked</li> <li><code>selected_option_text_color</code>: Text color of the main button</li> <li><code>selected_option_text_hover_color</code>: Text color of the main button when hovered</li> <li><code>selected_option_text_click_color</code>: Text color of the main button when clicked</li> <li><code>border_radius</code>: Radius for rounded corners</li> <li><code>centered</code>: If True, the dropdown is centered on the provided position</li> </ul>"},{"location":"components/dropdown-menu/#methods","title":"Methods","text":"<p>All methods inherited from the Element class.</p>"},{"location":"components/dropdown-menu/#setters","title":"Setters","text":"<pre><code>set_options(options: list[str]) -&gt; None\nset_selected_option(option: str) -&gt; None\nset_selected_index(index: int) -&gt; None\n</code></pre> <ul> <li><code>set_options</code>: Set the list of options for the dropdown</li> <li><code>set_selected_option</code>: Set the currently selected option by value</li> <li><code>set_selected_index</code>: Set the currently selected option by index</li> </ul>"},{"location":"components/dropdown-menu/#getters","title":"Getters","text":"<pre><code>get_selected_option() -&gt; str\nget_selected_index() -&gt; int\nget_options() -&gt; list[str]\n</code></pre> <ul> <li><code>get_selected_option</code>: Get the currently selected option</li> <li><code>get_selected_index</code>: Get the index of the currently selected option</li> <li><code>get_options</code>: Get the list of options</li> </ul>"},{"location":"components/dropdown-menu/#mouse-and-click-events","title":"Mouse and Click Events","text":"<p>See the Mouse and Click Events section in the Element documentation.</p>"},{"location":"components/dropdown-menu/#example","title":"Example","text":"<p>Simple example of a dropdown menu with selectable options.</p> <pre><code>import pygame\nimport pygameui\n\n# Initialize\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n\n# Create dropdown menu\ndropdown = pygameui.DropdownMenu(\n    position=(400, 200),\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    width=250,\n    height=50,\n    color=(240, 240, 240),\n    hover_color=(220, 220, 220),\n    text_color=(50, 50, 50),\n    centered=True\n)\n\n# Main loop\nrunning = True\nwhile running:\n    # Handle events\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Reset screen\n    screen.fill((30, 30, 30))  # Dark background\n\n    # Update dropdown\n    dropdown.update(events)\n\n    # Check for selection\n    if dropdown.get_selected_option():\n        print(f\"Selected: {dropdown.get_selected_option()}\")\n\n    # Draw elements\n    dropdown.draw(screen)\n\n    # Update display\n    pygame.display.flip()\n    clock.tick(60)\n</code></pre>"},{"location":"components/element/","title":"Element","text":"<p>The Element class is the foundation of all UI components in PygameUI. It can alse be used as a standalone component for your square or rectangular UI element needs. Backgrounds, panels etc.</p>"},{"location":"components/element/#basic-usage","title":"Basic Usage","text":"<pre><code># Create a basic element\nelement = pygameui.Element(\n    position=(100, 100),\n    width=200,\n    height=100,\n    color=(255, 255, 255)  # White color\n)\n\n# In the main loop\n# The events parameter is for API consistency, though not used directly by Element\nelement.update(events)\nelement.draw(screen)\n</code></pre>"},{"location":"components/element/#properties","title":"Properties","text":"<pre><code>position: tuple[int, int],\nwidth: int,\nheight: int,\ncolor: tuple[int, int, int] = (255, 255, 255),\nborder_radius: int = 0,\nborder_color: tuple[int, int, int] = None,\nborder_width: int = 2,\ncentered: bool = False\n</code></pre> <ul> <li><code>position</code>: Tuple of (x, y) coordinates</li> <li><code>width</code>: Width of the element in pixels</li> <li><code>height</code>: Height of the element in pixels</li> <li><code>color</code>: RGB tuple for element color (r, g, b)</li> <li><code>border_radius</code>: Radius for rounded corners in pixels</li> <li><code>border_color</code>: Color of the element border as RGB tuple, if None, the border will not be drawn</li> <li><code>border_width</code>: Width of the element border in pixels</li> <li><code>centered</code>: If True, the element is centered on the provided position; otherwise, the top-left corner is at the position</li> </ul>"},{"location":"components/element/#methods","title":"Methods","text":""},{"location":"components/element/#basic-methods","title":"Basic methods","text":"<pre><code>draw(surface: pygame.Surface) -&gt; None\nupdate(events=None) -&gt; None\n</code></pre> <ul> <li><code>draw</code>: Draws the element on the provided surface.</li> <li><code>update</code>: Updates the element's state including animations. The <code>events</code> parameter is optional and not used by the base Element class, but is included for API consistency with derived classes.</li> </ul>"},{"location":"components/element/#movement","title":"Movement","text":"<pre><code>move(x: int, y: int) -&gt; None\n</code></pre> <ul> <li><code>move</code>: Moves the element by the specified amounts in x and y directions relative to its current position. Note that this has no effect when the element is being animated.</li> </ul>"},{"location":"components/element/#setters","title":"Setters","text":"<pre><code>set_position(position: tuple[int,int]) -&gt; None\nset_framerate(framerate: int) -&gt; None\nset_display(display: bool) -&gt; None\nset_color(color: tuple[int, int, int]) -&gt; None\nset_border_color(color: tuple[int, int, int]) -&gt; None\nset_border_width(width: int) -&gt; None  \nset_border_radius(radius: int) -&gt; None\nset_animate(state: bool) -&gt; None\n</code></pre> <ul> <li><code>set_position</code>: Set the position of the element</li> <li><code>set_framerate</code>: Set the framerate for the element's animations (affects speed)</li> <li><code>set_display</code>: If set to True, the element is drawn when element.draw is called</li> <li><code>set_color</code>: Set the color of the element as RGB tuple</li> <li><code>set_border_color</code>: Set the color of the element's border as RGB tuple</li> <li><code>set_border_width</code>: Set the width of the element's border in pixels</li> <li><code>set_border_radius</code>: Set the border radius of the element in pixels</li> <li><code>set_animate</code>: If set to True, animations set on the element will be performed when update is called</li> </ul>"},{"location":"components/element/#getters","title":"Getters","text":"<pre><code>get_position() -&gt; tuple[int, int]\nget_display() -&gt; bool\nget_animation_state() -&gt; bool\n</code></pre> <ul> <li><code>get_position</code>: Get the current position of the element, if the element is centered, the returned position is the center of the element</li> <li><code>get_display</code>: Get the display state of the element (True if visible)</li> <li><code>get_animation_state</code>: Get the animation state of the element, returns True if the element is being animated, otherwise False</li> </ul>"},{"location":"components/element/#toggles","title":"Toggles","text":"<pre><code>toggle_display() -&gt; None\n</code></pre> <ul> <li><code>toggle_display</code>: Toggle the display state of the element (hide if visible, show if hidden)</li> </ul>"},{"location":"components/element/#animations","title":"Animations","text":"<pre><code>flow(\n    start_position: tuple[int, int],\n    end_position: tuple[int, int],\n    time: int,\n    loop: bool = False\n    ) -&gt; None\n\njump(\n    start_position: tuple[int, int],\n    end_position: tuple[int, int],\n    time: int,\n    loop: bool = False,\n    ratio: float = 1\n    ) -&gt; None\n</code></pre> <ul> <li><code>flow</code>: Sets up smooth movement animation of the element between two positions.</li> <li><code>start_position</code>: Where the element will start moving from (x, y coordinates)</li> <li><code>end_position</code>: Where the element will move to (x, y coordinates)</li> <li><code>time</code>: Duration of movement in milliseconds</li> <li> <p><code>loop</code>: If True, the element will continuously move back and forth between positions</p> </li> <li> <p><code>jump</code>: Sets up teleporting animation of the element between two positions.</p> </li> <li><code>start_position</code>: Where the element will start jumping from (x, y coordinates)</li> <li><code>end_position</code>: Where the element will jump to (x, y coordinates)</li> <li><code>time</code>: Duration between jumps in milliseconds</li> <li><code>loop</code>: If True, the element will continuously jump back and forth between positions</li> <li><code>ratio</code>: Float between 0 and 1 controlling how much time is spent at each position</li> </ul> <p>Note: You must call <code>set_animate(True)</code> to start the animation and call <code>update()</code> each frame to apply animation changes.</p>"},{"location":"components/element/#mouse-and-click-events","title":"Mouse and Click Events","text":"<pre><code>is_hovered() -&gt; bool\nis_clicked(button: int = 0) -&gt; bool\nwas_clicked(button: int = 0) -&gt; bool\n</code></pre> <ul> <li><code>is_hovered</code>: Check if the mouse is hovering over the element. Returns True if hovered, False otherwise.</li> <li><code>is_clicked</code>: Check if the element is hovered and the provided mouse button is down. Returns True if clicked, False otherwise.</li> <li><code>was_clicked</code>: Check if the element was clicked and then released. Returns True if this happened, False otherwise.</li> </ul> <p>For mouse button parameters: - <code>button</code> = 0: Left mouse button (default) - <code>button</code> = 1: Middle mouse button - <code>button</code> = 2: Right mouse button</p>"},{"location":"components/image/","title":"Image","text":"<p>The Image component displays images on the screen with customizable appearance.</p>"},{"location":"components/image/#basic-usage","title":"Basic Usage","text":"<pre><code># Create an image element\nimage = pygameui.Image(\n    position=(100, 100),\n    src=\"path/to/image.png\",\n    centered=True  # Center the image at the position\n)\n\n# In the main loop\nimage.update(events)  # events parameter for API consistency\nimage.draw(screen)\n</code></pre>"},{"location":"components/image/#properties","title":"Properties","text":"<pre><code>position: tuple[int, int],\nsrc: str,\nwidth: int = 0,\nheight: int = 0,\nscale: int = 1,\ncentered: bool = False\n</code></pre> <ul> <li><code>position</code>: Tuple of (x, y) coordinates for placing the image</li> <li><code>src</code>: Path to the image file (relative or absolute)</li> <li><code>width</code>: Width to resize the image to in pixels, 0 indicates using original width (modified by scale)</li> <li><code>height</code>: Height to resize the image to in pixels, 0 indicates using original height (modified by scale)</li> <li><code>scale</code>: Factor to scale the image by compared to the original size (1 = original size, 2 = double size), only applies when width and height are not set</li> <li><code>centered</code>: If True, the image is centered on the provided position; otherwise, the top-left corner is at the position</li> </ul>"},{"location":"components/image/#methods","title":"Methods","text":"<p>All methods inherited from the Element class.</p>"},{"location":"components/image/#update-method","title":"Update Method","text":"<pre><code>update(events=None) -&gt; None\n</code></pre> <ul> <li><code>update</code>: Updates the image element's state including animations. The <code>events</code> parameter is included for API consistency with other components but is not used by the Image class.</li> </ul>"},{"location":"components/image/#setters","title":"Setters","text":"<pre><code>set_image(src: str) -&gt; None\nscale(scale: int) -&gt; None\n</code></pre> <ul> <li><code>set_image</code>: Change the displayed image to a new image file</li> <li><code>scale</code>: Change the scale factor of the image relative to its original size</li> </ul>"},{"location":"components/image/#getters","title":"Getters","text":"<pre><code>get_image() -&gt; pygame.Surface\nget_scale() -&gt; int\n</code></pre> <ul> <li><code>get_image</code>: Get the current pygame Surface containing the image</li> <li><code>get_scale</code>: Get the current scale factor applied to the image</li> </ul>"},{"location":"components/input/","title":"Input","text":"<p>The Input component provides a text input field for user interaction.</p>"},{"location":"components/input/#basic-usage","title":"Basic Usage","text":"<pre><code># Create the input field\ninput_field = pygameui.Input(\n    position=(100, 100),\n    width=300,\n    height=40,\n    hint=\"Enter your name...\"\n)\n\n# In the main loop\nevents = pygame.event.get()\n# Important: Input component requires events to handle typing\ninput_field.update(events)  \ninput_field.draw(screen)\n\n# Getting the current value\ntext_value = input_field.get_value()\n</code></pre> <p>Important: The Input component requires event handling to work properly. Always pass the events list to the update method.</p>"},{"location":"components/input/#properties","title":"Properties","text":"<pre><code>position: tuple[int, int],\nwidth: int = 200,\nheight: int = 50,\npassive_text_color: tuple[int, int, int] = (150, 150, 150),\nactive_text_color: tuple[int, int, int] = (255, 255, 255),\npassive_border_color: tuple[int, int, int] = (100, 100, 100),\nactive_border_color: tuple[int, int, int] = (200, 200, 200),\nborder_radius: int = 0,\nborder_width: int = 2,\nfont_size: int = 20,\nfont_family: str = \"Arial\",\nhint: str = \"\",\ncentered: bool = False\n</code></pre> <ul> <li><code>position</code>: Tuple of (x, y) coordinates</li> <li><code>width</code>: Width of the input field</li> <li><code>height</code>: Height of the input field</li> <li><code>passive_text_color</code>: Color of the text when the input is not active</li> <li><code>active_text_color</code>: Color of the text when the input is active</li> <li><code>passive_border_color</code>: Color of the border when the input is not active</li> <li><code>active_border_color</code>: Color of the border when the input is active</li> <li><code>border_radius</code>: Radius for rounded corners</li> <li><code>border_width</code>: Width of the border</li> <li><code>font_size</code>: Size of the font</li> <li><code>font_family</code>: Font family for the text</li> <li><code>hint</code>: Text to display when the input is empty</li> <li><code>centered</code>: If True, the input is centered on the provided position</li> </ul>"},{"location":"components/input/#methods","title":"Methods","text":"<p>All methods inherited from the Text class.</p>"},{"location":"components/input/#setters","title":"Setters","text":"<pre><code>set_max_length(max_length: int) -&gt; None\nset_filter(filter: str, only_allow_filter: bool = False) -&gt; None\nset_hint(hint: str) -&gt; None\nset_value(value: str) -&gt; None\n</code></pre> <ul> <li><code>set_max_length</code>: Set the maximum length of the input text</li> <li><code>set_filter</code>: Set a filter for allowed characters. If only_allow_filter is True, only characters in filter are allowed; otherwise, characters in filter are excluded</li> <li><code>set_hint</code>: Set the hint text displayed when the input is empty</li> <li><code>set_value</code>: Set the current text value</li> </ul>"},{"location":"components/input/#getters","title":"Getters","text":"<pre><code>get_value() -&gt; str\n</code></pre> <ul> <li><code>get_value</code>: Get the current text value entered by the user</li> </ul>"},{"location":"components/input/#example","title":"Example","text":"<p>A simple form with input fields.</p> <pre><code>import pygame\nimport pygameui\n\n# Initialize\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n\n# Create input fields\nname_input = pygameui.Input(\n    position=(400, 150),\n    width=300,\n    height=40,\n    hint=\"Enter your name\",\n    passive_text_color=(180, 180, 180),\n    active_text_color=(255, 255, 255),\n    passive_border_color=(80, 80, 80),\n    active_border_color=(120, 120, 255),\n    border_radius=5,\n    centered=True\n)\n\n# Create a numbers-only input field\nage_input = pygameui.Input(\n    position=(400, 220),\n    width=300,\n    height=40,\n    hint=\"Enter your age (numbers only)\",\n    passive_text_color=(180, 180, 180),\n    active_text_color=(255, 255, 255),\n    passive_border_color=(80, 80, 80),\n    active_border_color=(120, 120, 255),\n    border_radius=5,\n    centered=True\n)\n# Set a filter to only allow numbers\nage_input.set_filter(\"0123456789\", only_allow_filter=True)\nage_input.set_max_length(3)\n\n# Create labels\nname_label = pygameui.Text(\n    position=(200, 150),\n    content=\"Name:\",\n    color=(255, 255, 255),\n    font_size=20,\n    centered=True\n)\n\nage_label = pygameui.Text(\n    position=(200, 220),\n    content=\"Age:\",\n    color=(255, 255, 255),\n    font_size=20,\n    centered=True\n)\n\n# Create a submit button\nsubmit_button = pygameui.Button(\n    position=(400, 300),\n    width=120,\n    height=40,\n    label=\"Submit\",\n    color=(100, 180, 100),\n    hover_color=(120, 200, 120),\n    text_color=(255, 255, 255),\n    border_radius=5,\n    centered=True\n)\n\n# Result text\nresult_text = pygameui.Text(\n    position=(400, 400),\n    content=\"\",\n    color=(255, 255, 255),\n    font_size=20,\n    centered=True\n)\n\n# Main loop\nrunning = True\nwhile running:\n    # Handle events\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Reset screen\n    screen.fill((30, 30, 30))  # Dark background\n\n    # Update elements\n    name_input.update(events)\n    age_input.update(events)\n    name_label.update()\n    age_label.update()\n    submit_button.update()\n    result_text.update()\n\n    # Check for submit button click\n    if submit_button.was_clicked():\n        name = name_input.get_value()\n        age = age_input.get_value()\n\n        if name and age:\n            result_text.set_content(f\"Hello {name}, you are {age} years old!\")\n        else:\n            result_text.set_content(\"Please fill in all fields\")\n\n    # Draw elements\n    name_input.draw(screen)\n    age_input.draw(screen)\n    name_label.draw(screen)\n    age_label.draw(screen)\n    submit_button.draw(screen)\n    result_text.draw(screen)\n\n    # Update display\n    pygame.display.flip()\n    clock.tick(60)\n</code></pre>"},{"location":"components/overview/","title":"Components Overview","text":"<p>This guide demonstrates how PygameUI components work together to create cohesive user interfaces.</p>"},{"location":"components/overview/#component-interactions","title":"Component Interactions","text":"<p>PygameUI is designed to make component interactions intuitive. Each component handles its own drawing, updating, and event processing, allowing you to focus on building your application logic.</p>"},{"location":"components/overview/#basic-component-pattern","title":"Basic Component Pattern","text":"<p>All PygameUI components follow the same basic pattern:</p> <pre><code># 1. Create component instances\nmy_component = pygameui.Component(\n    position=(x, y),\n    # Component-specific parameters\n)\n\n# 2. In the main loop:\n# - Update components with events\nmy_component.update(events)\n# - Draw components to the screen\nmy_component.draw(screen)\n</code></pre>"},{"location":"components/overview/#component-z-order","title":"Component Z-Order","text":"<p>Components are drawn in the order you call their <code>draw()</code> methods. To control which components appear on top of others, simply order your draw calls accordingly:</p> <pre><code># Background elements first\nbackground.draw(screen)\n# UI container elements\npanel.draw(screen)\n# Interactive elements\nbutton.draw(screen)\n# Foreground elements last\ntooltip.draw(screen)\n</code></pre>"},{"location":"components/overview/#layout-management","title":"Layout Management","text":"<p>PygameUI doesn't have an automatic layout system, but you can create organized layouts by:</p> <ol> <li>Grid Placement: Position elements using calculated coordinates</li> <li>Relative Positioning: Position elements relative to other elements</li> <li>Centered Alignment: Use the <code>centered=True</code> parameter for alignment</li> </ol> <p>Example of grid placement:</p> <pre><code># Create a 3x3 grid of buttons\nbuttons = []\nfor row in range(3):\n    for col in range(3):\n        button = pygameui.Button(\n            position=(200 + col * 150, 150 + row * 100),\n            width=100,\n            height=50,\n            label=f\"Button {row*3 + col + 1}\"\n        )\n        buttons.append(button)\n</code></pre>"},{"location":"components/overview/#best-practices","title":"Best Practices","text":""},{"location":"components/overview/#keeping-a-clean-main-loop","title":"Keeping a clean main loop","text":"<p>To keep your main loop clean and organized, consider sorting your components into lists based on their UI page or functionality. For example:</p> <pre><code># Organizing components by functionality\nmenu_components = [button1, button2, button3]\ngame_components = [player_stats_ui, enemy_ui, score_display]\nsettings_components = [volume_slider, resolution_dropdown]\n</code></pre> <p>This way, you can easily iterate through each list to update and draw components specific to that part of your application.</p> <pre><code># Main loop\nrunning = True\nwhile running:\n    # Handle events\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Update and draw menu components\n    for component in menu_components:\n        component.update(events)\n        component.draw(screen)\n\n    # Update and draw game components\n    for component in game_components:\n        component.update(events)\n        component.draw(screen)\n\n    # Update and draw settings components\n    for component in settings_components:\n        component.update(events)\n        component.draw(screen)\n\n    pygame.display.flip()\n</code></pre>"},{"location":"components/overview/#event-handling","title":"Event Handling","text":"<p>Always pass pygame events to all components:</p> <pre><code>events = pygame.event.get()\nfor component in all_components:\n    component.update(events)\n</code></pre>"},{"location":"components/overview/#state-management","title":"State Management","text":"<p>Track UI state separately from components:</p> <pre><code># Define UI states\nUI_STATE_MAIN_MENU = 0\nUI_STATE_GAME = 1\nUI_STATE_SETTINGS = 2\n\n# Current state\ncurrent_state = UI_STATE_MAIN_MENU\n\n# Update and draw components based on state\nif current_state == UI_STATE_MAIN_MENU:\n    # Update and draw menu components\n    for component in menu_components:\n        component.update(events)\n        component.draw(screen)\nelif current_state == UI_STATE_GAME:\n    # Update and draw game UI components\n    for component in game_components:\n        component.update(events)\n        component.draw(screen)\n# ... and so on\n</code></pre>"},{"location":"components/overview/#performance-optimization","title":"Performance Optimization","text":"<p>For better performance: - Only update visible components - Use simple shapes and smaller images where possible - Limit the number of animated components</p>"},{"location":"components/overview/#organizing-component-groups","title":"Organizing Component Groups","text":"<p>Group related components for easier management:</p> <pre><code>player_stats_ui = {\n    \"container\": pygameui.Element(position=(100, 100), width=200, height=150),\n    \"name\": pygameui.Text(position=(100, 110), content=\"Player Name\"),\n    \"health_bar\": pygameui.ProgressBar(position=(100, 140), progress=100),\n    \"score\": pygameui.Text(position=(100, 170), content=\"Score: 0\")\n}\n\n# Update and draw all components in a group\nfor component in player_stats_ui.values():\n    component.update(events)\n    component.draw(screen)\n</code></pre>"},{"location":"components/progress-bar/","title":"Progress Bar","text":"<p>Progress bars provide visual representation of progress or completion status.</p>"},{"location":"components/progress-bar/#basic-usage","title":"Basic Usage","text":"<pre><code># Create a progress bar\nprogress_bar = pygameui.ProgressBar(\n    position=(100, 100),\n    width=200,\n    height=30,\n    progress=50,  # Initial progress value\n    max_progress=100,\n    color=(150, 255, 150),  # Green progress fill\n    background_color=(100, 100, 100),\n    centered=True\n)\n\n# In the main loop\nprogress_bar.update(events)  # events parameter for API consistency\nprogress_bar.draw(screen)\n\n# Change progress values\nprogress_bar.change_progress(5)  # Increase by 5\n# or\nprogress_bar.set_progress(75)    # Set to specific value\n</code></pre>"},{"location":"components/progress-bar/#properties","title":"Properties","text":"<pre><code>position: tuple[int, int],\nwidth: int = 200,\nheight: int = 50,\nprogress: int = 0,\nmax_progress: int = 100,\nmin_progress: int = 0,\ncolor: tuple[int, int, int] = (150, 255, 150),\nbackground_color: tuple[int, int, int] = (100, 100, 100),\nborder_radius: int = 0,\nborder_color: tuple[int, int, int] = (200, 200, 200),\nborder_width: int = 2,\ncentered: bool = False\n</code></pre> <ul> <li><code>position</code>: Tuple of (x, y) coordinates</li> <li><code>width</code>: Width of the progress bar</li> <li><code>height</code>: Height of the progress bar</li> <li><code>progress</code>: Initial progress value</li> <li><code>max_progress</code>: Maximum value for the progress bar</li> <li><code>min_progress</code>: Minimum value for the progress bar</li> <li><code>color</code>: Color of the progress bar fill</li> <li><code>background_color</code>: Color of the unfilled portion, set to None for no background</li> <li><code>border_radius</code>: Radius for rounded corners</li> <li><code>border_color</code>: Color of the border around the progress bar, set to None for no border</li> <li><code>border_width</code>: Width of the border</li> <li><code>centered</code>: If True, the progress bar is centered on the provided position</li> </ul>"},{"location":"components/progress-bar/#methods","title":"Methods","text":"<p>All methods inherited from the Element class.</p>"},{"location":"components/progress-bar/#progress-control","title":"Progress Control","text":"<pre><code>set_progress(progress: int) -&gt; None\nset_max_progress(max_progress: int) -&gt; None\nset_min_progress(min_progress: int) -&gt; None\nchange_progress(amount: int) -&gt; None\n</code></pre> <ul> <li><code>set_progress</code>: Sets the current progress value (clamped between min and max)</li> <li><code>set_max_progress</code>: Sets the maximum progress value</li> <li><code>set_min_progress</code>: Sets the minimum progress value</li> <li><code>change_progress</code>: Increases or decreases the current progress by the specified amount</li> </ul>"},{"location":"components/progress-bar/#getters","title":"Getters","text":"<pre><code>get_progress() -&gt; int\n</code></pre> <ul> <li><code>get_progress</code>: Returns the current progress value</li> </ul>"},{"location":"components/progress-bar/#mouse-and-click-events","title":"Mouse and Click Events","text":"<p>See the Mouse and Click Events section in the Element documentation.</p>"},{"location":"components/progress-bar/#example","title":"Example","text":"<p>Simple example of a styled progress bar that can be controlled with the arrow keys. <pre><code>import pygame\nimport pygameui\n\n# Initialize\npygame.init()\nscreen = pygame.display.set_mode((800, 600)) # Set your own width and height\n\n# Create UI elements\nprogressbar = pygameui.ProgressBar(\n    (400, 300),  # Centered in the screen\n    width=400,\n    height=30,\n    color=(75, 145, 250),  # Blue progress fill\n    background_color=(40, 40, 40),  # Dark gray background\n    border_color=(150, 150, 150),  # Light gray border\n    border_radius=10,  # Rounded corners\n    border_width=2,\n    centered=True\n)\n\ninstruction_text = pygameui.Text(\n    (400, 200),  # Centered in the screen\n    content=\"Press left/right arrow keys to change progress\",\n    color=(255, 255, 255),  # White text\n    font_size=24,\n    centered=True\n)\n\n# Main loop\nrunning = True\nwhile running:\n    # Handle events\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            running = False\n\n    keys_down = pygame.key.get_pressed()\n    # Move progressbar with arrow keys\n    if keys_down[pygame.K_RIGHT]:\n        progressbar.change_progress(.1)\n    if keys_down[pygame.K_LEFT]:\n        progressbar.change_progress(-.1)\n\n    # Reset screen\n    screen.fill((30, 30, 30))  # Darker background for contrast\n    # Update element, moves, checks actions etc\n    instruction_text.update()\n    progressbar.update()\n\n    # Draw element on screen\n    progressbar.draw(screen)\n    instruction_text.draw(screen)\n\n    # Update pygame display\n    pygame.display.flip()\n</code></pre></p>"},{"location":"components/table/","title":"Table","text":"<p>Tables allow for displaying data in a grid format with rows and columns.</p>"},{"location":"components/table/#basic-usage","title":"Basic Usage","text":"<pre><code># Create a table with data\ntable = pygameui.Table(\n    position=(100, 100),\n    content=[\n        [\"Header 1\", \"Header 2\", \"Header 3\"],\n        [\"Row 1 Col 1\", \"Row 1 Col 2\", \"Row 1 Col 3\"],\n        [\"Row 2 Col 1\", \"Row 2 Col 2\", \"Row 2 Col 3\"]\n    ],\n    width=400,\n    height=200\n)\n\n# In the main loop\ntable.update(events)  # events parameter for API consistency\ntable.draw(screen)\n</code></pre>"},{"location":"components/table/#properties","title":"Properties","text":"<p><pre><code>position: tuple[int, int],\ncontent: list[list[str]], \nwidth: int = 200, \nheight: int = 50, \ncolor: tuple[int, int, int] = (255, 255, 255),\nhover_color: tuple[int, int, int] = (200, 200, 200),\ntext_color: tuple[int, int, int] = (0, 0, 0),\nborder_color: tuple[int, int, int] = (200, 200, 200),\nborder_width: int = 2,\nborder_radius: int = 0, \ncentered: bool = False\n</code></pre> - <code>position</code>: Tuple of (x, y) coordinates where the table will be positioned - <code>content</code>: 2D list of strings representing the table data (rows and columns) - <code>width</code>: Width of the entire table in pixels - <code>height</code>: Height of the entire table in pixels - <code>color</code>: Background color of the cells as RGB tuple (r, g, b) - <code>hover_color</code>: Background color of the cells when hovered as RGB tuple - <code>text_color</code>: Color of the text in cells as RGB tuple - <code>border_color</code>: Color of the cell borders as RGB tuple - <code>border_width</code>: Width of the cell borders in pixels - <code>border_radius</code>: Radius for rounded corners of cells in pixels - <code>centered</code>: If True, the table is centered on the provided position; otherwise, the top-left corner is at the position</p>"},{"location":"components/table/#methods","title":"Methods","text":"<p>All methods inherited from the Element class.</p>"},{"location":"components/table/#update-method","title":"Update Method","text":"<pre><code>update(events=None) -&gt; None\n</code></pre> <ul> <li><code>update</code>: Updates the table and its elements. The <code>events</code> parameter is included for API consistency with other components but is not used directly by the Table class itself.</li> </ul>"},{"location":"components/table/#setters","title":"Setters","text":"<pre><code>set_content(content: list[list[str]]) -&gt; None\n</code></pre> <ul> <li><code>set_content</code>: Updates the table with new content. The content should be a 2D list of strings where each inner list represents a row of data.</li> </ul>"},{"location":"components/table/#example","title":"Example","text":"<p>A simple example demonstrating a table with different types of data.</p> <pre><code>import pygame\nimport pygameui\n\n# Initialize\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n\n# Create table data\ntable_data = [\n    [\"Name\", \"Age\", \"Role\"],\n    [\"John\", \"32\", \"Developer\"],\n    [\"Sarah\", \"28\", \"Designer\"],\n    [\"Mike\", \"45\", \"Manager\"]\n]\n\n# Create a table\ndata_table = pygameui.Table(\n    position=(400, 300),\n    content=table_data,\n    width=400,\n    height=200,\n    color=(240, 240, 240),\n    hover_color=(220, 220, 220),\n    text_color=(30, 30, 30),\n    border_color=(180, 180, 180),\n    border_width=1,\n    border_radius=2,\n    centered=True\n)\n\n# Main loop\nrunning = True\nwhile running:\n    # Handle events\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Reset screen\n    screen.fill((30, 30, 30))  # Dark background\n\n    # Update table with events for API consistency\n    data_table.update(events)\n\n    # Draw table\n    data_table.draw(screen)\n\n    # Display instructions\n    title = pygameui.Text(\n        position=(400, 100),\n        content=\"Data Table Example\",\n        color=(255, 255, 255),\n        font_size=30,\n        centered=True\n    )\n    title.update()\n    title.draw(screen)\n\n    # Update display\n    pygame.display.flip()\n    clock.tick(60)\n</code></pre>"},{"location":"components/text/","title":"Text","text":"<p>The Text component displays text on the screen with customizable appearance.</p>"},{"location":"components/text/#basic-usage","title":"Basic Usage","text":"<pre><code># Create a text element\ntext = pygameui.Text(\n    position=(100, 100),\n    content=\"Hello, World!\",\n    color=(255, 255, 255),  # White text\n    font_size=24\n)\n\n# In the main loop\ntext.update(events)  # events parameter is included for API consistency\ntext.draw(screen)\n</code></pre>"},{"location":"components/text/#properties","title":"Properties","text":"<pre><code>position: tuple[int, int],\ncontent: str,\ncolor: tuple[int, int, int] = (255, 255, 255),\nfont_size: int = 20,\nfont_family: str = \"Arial\",\nwidth: int = 0,\nheight: int = 0,\nanti_aliasing: bool = True,\ncentered: bool = False\n</code></pre> <ul> <li><code>position</code>: Tuple of (x, y) coordinates</li> <li><code>content</code>: The text to display</li> <li><code>color</code>: RGB tuple for text color (r, g, b)</li> <li><code>font_size</code>: Size of the font in pixels</li> <li><code>font_family</code>: Font family to use (should be available on the system)</li> <li><code>width</code>: Width of the text element in pixels, 0 indicates auto-width based on content</li> <li><code>height</code>: Height of the text element in pixels, 0 indicates auto-height based on content</li> <li><code>anti_aliasing</code>: Whether to use anti-aliasing for smoother text rendering</li> <li><code>centered</code>: If True, the text is centered on the provided position; otherwise, the top-left corner is at the position</li> </ul>"},{"location":"components/text/#methods","title":"Methods","text":"<p>All methods inherited from the Element class.</p>"},{"location":"components/text/#update-method","title":"Update Method","text":"<pre><code>update(events=None) -&gt; None\n</code></pre> <ul> <li><code>update</code>: Updates the text element's state including animations. The <code>events</code> parameter is included for API consistency with other components but is not used by the Text class.</li> </ul>"},{"location":"components/text/#setters","title":"Setters","text":"<pre><code>set_content(content: str) -&gt; None\nset_color(color: tuple[int, int, int]) -&gt; None\nset_font_size(font_size: int) -&gt; None\nset_font_family(font_family: str) -&gt; None\n</code></pre> <ul> <li><code>set_content</code>: Change the displayed text. Non-string content will be converted to string automatically.</li> <li><code>set_color</code>: Change the color of the text as RGB tuple (r, g, b)</li> <li><code>set_font_size</code>: Change the size of the font in pixels</li> <li><code>set_font_family</code>: Change the font family (must be available on the system)</li> </ul>"},{"location":"components/text/#getters","title":"Getters","text":"<pre><code>get_content() -&gt; str\n</code></pre> <ul> <li><code>get_content</code>: Get the current text content</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>This section contains detailed examples demonstrating how to use PygameUI components to build interactive interfaces.</p>"},{"location":"examples/#available-examples","title":"Available Examples","text":"<p>Each example demonstrates different aspects of the PygameUI library:</p>"},{"location":"examples/#button-example","title":"Button Example","text":"<p>Learn how to create and customize buttons with different styles and handle user interactions.</p> <p></p> <ul> <li>Key concepts: Button styling, event handling, click detection</li> <li>Components used: Button, Text</li> <li>Source code: button_example.py</li> </ul>"},{"location":"examples/#input-form-example","title":"Input Form Example","text":"<p>A complete registration form with validation, demonstrating how to build forms with PygameUI.</p> <p></p> <ul> <li>Key concepts: Form validation, checkboxes, input filtering</li> <li>Components used: Input, Text, Checkbox, Button</li> <li>Source code: input_form_example.py</li> </ul>"},{"location":"examples/#animation-demo","title":"Animation Demo","text":"<p>Explore PygameUI's animation capabilities with flow and jump animations, plus custom animation techniques.</p> <p></p> <ul> <li>Key concepts: Flow animation, jump animation, custom motion</li> <li>Components used: Element, Text</li> <li>Source code: animation_demo.py</li> </ul>"},{"location":"examples/#simple-game","title":"Simple Game","text":"<p>A complete clicker game with multiple screens, shop system, and settings - showcasing how to build a full application.</p> <p></p> <ul> <li>Key concepts: Multiple screens, state management, dialog windows, theming</li> <li>Components used: Button, Text, DropdownMenu, Element</li> <li>Source code: simple_game.py</li> </ul>"},{"location":"examples/#running-the-examples","title":"Running the Examples","text":"<p>To run any example:</p> <ol> <li>Make sure you have both Pygame and PygameUI installed</li> <li>Download the example file or copy the code from the documentation</li> <li>Run it with Python: <code>python example_filename.py</code></li> </ol>"},{"location":"examples/#creating-your-own-examples","title":"Creating Your Own Examples","text":"<p>When creating your own examples, remember these key principles:</p> <ol> <li>Always get events and pass them to the update method of UI components</li> <li>Draw components after updating them</li> <li>Use consistent styling for a cohesive UI</li> <li>Organize your code with clear sections for initialization, update, and drawing</li> </ol>"},{"location":"examples/animation/","title":"Animation Demo","text":"<p>This example demonstrates how to use PygameUI's built-in animation capabilities as well as implementing custom animations.</p> <p></p>"},{"location":"examples/animation/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Flow animation (smooth movement)</li> <li>Jump animation (teleporting)</li> <li>Custom animation (circular motion)</li> <li>Animation controls (play/pause)</li> </ul>"},{"location":"examples/animation/#animation-types","title":"Animation Types","text":"<p>PygameUI provides two built-in animation methods which are demonstrated in this example:</p> <ol> <li>Flow Animation: Smooth movement between two positions</li> <li>Jump Animation: Instant teleportation between positions with configurable timing</li> </ol> <p>Additionally, the example shows how to create custom animations by directly manipulating element positions.</p>"},{"location":"examples/animation/#code-walkthrough","title":"Code Walkthrough","text":""},{"location":"examples/animation/#flow-animation","title":"Flow Animation","text":"<p>The flow animation smoothly transitions an element between two points:</p> <pre><code># Create flow animation elements\nflow_box = pygameui.Element(\n    position=(200, 170),\n    width=50,\n    height=50,\n    color=(75, 145, 250),\n    border_radius=10,\n    centered=True\n)\n\n# Set up flow animation\nflow_box.flow(\n    start_position=(200, 170),\n    end_position=(600, 170),\n    time=2000,  # 2 seconds\n    loop=True\n)\nflow_box.set_animate(True)\n</code></pre>"},{"location":"examples/animation/#jump-animation","title":"Jump Animation","text":"<p>The jump animation teleports an element between positions:</p> <pre><code># Create jump animation elements\njump_box = pygameui.Element(\n    position=(200, 300),\n    width=50,\n    height=50,\n    color=(250, 100, 100),\n    border_radius=10,\n    centered=True\n)\n\n# Set up jump animation\njump_box.jump(\n    start_position=(200, 300),\n    end_position=(600, 300),\n    time=2000,  # 2 seconds\n    loop=True,\n    ratio=0.5  # Equal time at each position\n)\njump_box.set_animate(True)\n</code></pre>"},{"location":"examples/animation/#custom-animation","title":"Custom Animation","text":"<p>The custom animation uses trigonometric functions to create a circular motion:</p> <pre><code># Custom animation variables\nangle = 0\n\n# In the main loop:\nif animations_active:\n    angle += 0.02\n    x = 400 + 150 * math.cos(angle)\n    y = 450 + 40 * math.sin(angle)\n    custom_box.set_position((x, y))\n</code></pre>"},{"location":"examples/animation/#animation-controls","title":"Animation Controls","text":"<p>The example demonstrates toggling animations on and off with keyboard input:</p> <pre><code># Handle events\nevents = pygame.event.get()\nfor event in events:\n    if event.type == pygame.QUIT:\n        running = False\n    elif event.type == pygame.KEYDOWN:\n        if event.key == pygame.K_SPACE:\n            # Toggle animations\n            animations_active = not animations_active\n            flow_box.set_animate(animations_active)\n            jump_box.set_animate(animations_active)\n</code></pre>"},{"location":"examples/animation/#animation-parameters","title":"Animation Parameters","text":""},{"location":"examples/animation/#flow-animation-parameters","title":"Flow Animation Parameters","text":"<ul> <li><code>start_position</code>: The initial position (x, y coordinates)</li> <li><code>end_position</code>: The destination position (x, y coordinates)</li> <li><code>time</code>: Duration of one animation cycle in milliseconds</li> <li><code>loop</code>: Whether the animation should repeat after completion</li> </ul>"},{"location":"examples/animation/#jump-animation-parameters","title":"Jump Animation Parameters","text":"<ul> <li><code>start_position</code>: The first position (x, y coordinates)</li> <li><code>end_position</code>: The second position (x, y coordinates)</li> <li><code>time</code>: Duration of one animation cycle in milliseconds</li> <li><code>loop</code>: Whether the animation should repeat after completion</li> <li><code>ratio</code>: Time spent at start_position vs. end_position (0.5 = equal time at both)</li> </ul>"},{"location":"examples/animation/#animation-controls_1","title":"Animation Controls","text":"<p>For both animation types, you must: 1. Set up the animation with <code>flow()</code> or <code>jump()</code> 2. Enable animation with <code>set_animate(True)</code> 3. Call <code>update()</code> each frame to apply animation changes</p>"},{"location":"examples/animation/#full-example-code","title":"Full Example Code","text":"<p>See the complete animation_demo.py file in the examples directory.</p> <pre><code># See full implementation in examples/animation_demo.py\n</code></pre>"},{"location":"examples/button/","title":"Button Example","text":"<p>This example demonstrates how to create and interact with different styles of buttons in PygameUI.</p> <p></p>"},{"location":"examples/button/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Creating buttons with different styles</li> <li>Handling button clicks</li> <li>Updating UI elements based on user interaction</li> <li>Customizing button colors, text, and borders</li> </ul>"},{"location":"examples/button/#code-walkthrough","title":"Code Walkthrough","text":""},{"location":"examples/button/#setting-up","title":"Setting Up","text":"<p>First, we initialize Pygame and create a screen:</p> <pre><code>import pygame\nimport pygameui\n\npygame.init()\nscreen = pygame.display.set_mode((800, 600))\nclock = pygame.time.Clock()\n</code></pre>"},{"location":"examples/button/#creating-ui-elements","title":"Creating UI Elements","text":"<p>We create a title and three different button styles:</p> <pre><code># Create a title\ntitle = pygameui.Text(\n    position=(400, 100),\n    content=\"Button Example\",\n    color=(255, 255, 255),\n    font_size=36,\n    centered=True\n)\n\n# Create three button styles: primary, secondary, and danger\nprimary_button = pygameui.Button(\n    position=(400, 250),\n    label=\"Primary Button\",\n    width=200,\n    height=50,\n    color=(75, 145, 250),  # Blue\n    hover_color=(95, 165, 255),\n    click_color=(55, 125, 235),\n    text_color=(255, 255, 255),\n    border_radius=8,\n    centered=True\n)\n\nsecondary_button = pygameui.Button(\n    position=(400, 325),\n    label=\"Secondary Button\",\n    width=200,\n    height=50,\n    color=(240, 240, 240),  # Light gray\n    hover_color=(220, 220, 220),\n    click_color=(200, 200, 200),\n    text_color=(50, 50, 50),\n    border_radius=8,\n    centered=True\n)\n\ndanger_button = pygameui.Button(\n    position=(400, 400),\n    label=\"Danger Button\",\n    width=200,\n    height=50,\n    color=(250, 75, 75),  # Red\n    hover_color=(255, 95, 95),\n    click_color=(235, 55, 55),\n    text_color=(255, 255, 255),\n    border_radius=8,\n    centered=True\n)\n</code></pre>"},{"location":"examples/button/#main-loop","title":"Main Loop","text":"<p>In our main loop, we handle events, update UI elements, and respond to user interactions:</p> <pre><code># Main loop\nrunning = True\nwhile running:\n    # Handle events\n    events = pygame.event.get()\n    for event in events:\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Reset screen\n    screen.fill((30, 30, 30))\n\n    # Update UI elements\n    title.update(events)\n    primary_button.update(events)\n    secondary_button.update(events)\n    danger_button.update(events)\n    status_text.update(events)\n\n    # Handle button clicks\n    if primary_button.was_clicked():\n        status_text.set_content(\"Primary button was clicked!\")\n    elif secondary_button.was_clicked():\n        status_text.set_content(\"Secondary button was clicked!\")\n    elif danger_button.was_clicked():\n        status_text.set_content(\"Danger button was clicked!\")\n\n    # Draw UI elements\n    title.draw(screen)\n    primary_button.draw(screen)\n    secondary_button.draw(screen)\n    danger_button.draw(screen)\n    status_text.draw(screen)\n\n    # Update display\n    pygame.display.flip()\n    clock.tick(60)\n</code></pre>"},{"location":"examples/button/#button-customization-options","title":"Button Customization Options","text":"<p>The Button class offers many customization options:</p> <ul> <li>Colors: Background color, hover color, click color</li> <li>Text: Text content, color, font, size</li> <li>Shape: Border radius for rounded corners</li> <li>Size: Width and height</li> <li>Position: X, Y coordinates (can be centered)</li> </ul>"},{"location":"examples/button/#full-example-code","title":"Full Example Code","text":"<p>See the complete button_example.py file in the examples directory.</p> <pre><code># See full implementation in examples/button_example.py\n</code></pre>"},{"location":"examples/form/","title":"Input Form Example","text":"<p>This example demonstrates how to create a complete registration form with validation using PygameUI.</p> <p></p>"},{"location":"examples/form/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Creating and styling input fields</li> <li>Form validation</li> <li>Checkboxes for agreement confirmation</li> <li>Dynamic button states (enabled/disabled)</li> <li>Error messaging</li> </ul>"},{"location":"examples/form/#code-walkthrough","title":"Code Walkthrough","text":""},{"location":"examples/form/#form-fields","title":"Form Fields","text":"<p>The example creates a structured form with multiple input fields:</p> <pre><code># Form fields\nfields = {\n    \"name\": {\n        \"label\": pygameui.Text(\n            position=(250, 150),\n            content=\"Name:\",\n            color=(220, 220, 220),\n            font_size=20,\n            centered=True\n        ),\n        \"input\": pygameui.Input(\n            position=(500, 150),\n            width=300,\n            height=40,\n            hint=\"Enter your name\",\n            passive_text_color=(150, 150, 150),\n            active_text_color=(255, 255, 255),\n            passive_border_color=(100, 100, 100),\n            active_border_color=(150, 150, 255),\n            border_radius=5,\n            centered=True\n        )\n    },\n    # Additional fields for email and age\n}\n\n# Set filter for age field to only allow numbers\nfields[\"age\"][\"input\"].set_filter(\"0123456789\", only_allow_filter=True)\nfields[\"age\"][\"input\"].set_max_length(3)  # Max 3 digits for age\n</code></pre>"},{"location":"examples/form/#agreement-checkbox","title":"Agreement Checkbox","text":"<p>The form includes a checkbox for accepting terms and conditions:</p> <pre><code># Agreement checkbox\nagreement_checkbox = pygameui.Checkbox(\n    position=(250, 360),\n    width=30,\n    height=30,\n    style=\"checkmark\",\n    color=(150, 255, 150),\n    background_color=(40, 40, 40),\n    border_color=(200, 200, 200),\n    border_width=1\n)\n\nagreement_text = pygameui.Text(\n    position=(500, 360),\n    content=\"I agree to the terms and conditions\",\n    color=(220, 220, 220),\n    font_size=20\n)\n</code></pre>"},{"location":"examples/form/#form-validation","title":"Form Validation","text":"<p>The example implements comprehensive form validation:</p> <pre><code># Validate form function\ndef validate_form():\n    if not fields[\"name\"][\"input\"].get_value():\n        return \"Please enter your name\"\n\n    if not fields[\"email\"][\"input\"].get_value():\n        return \"Please enter your email\"\n\n    if \"@\" not in fields[\"email\"][\"input\"].get_value():\n        return \"Please enter a valid email address\"\n\n    if not fields[\"age\"][\"input\"].get_value():\n        return \"Please enter your age\"\n\n    if not agreement_checkbox.is_checked():\n        return \"Please agree to the terms and conditions\"\n\n    return None  # No errors\n</code></pre>"},{"location":"examples/form/#conditional-button-states","title":"Conditional Button States","text":"<p>The submit button's appearance changes based on the checkbox state:</p> <pre><code># Determine which submit button to show based on checkbox state\nactive_submit = submit_button if agreement_checkbox.is_checked() else submit_button_disabled\nactive_submit.update(events)\n</code></pre>"},{"location":"examples/form/#form-submission","title":"Form Submission","text":"<p>The form processes the submission and displays success or error messages:</p> <pre><code># Handle submit button click\nif submit_button.was_clicked() and agreement_checkbox.is_checked():\n    validation_error = validate_form()\n\n    if validation_error:\n        status_message.set_content(validation_error)\n        status_message.set_color((255, 100, 100))  # Red for error\n    else:\n        status_message.set_content(\"Form submitted successfully!\")\n        status_message.set_color((100, 255, 100))  # Green for success\n</code></pre>"},{"location":"examples/form/#form-design-best-practices","title":"Form Design Best Practices","text":"<p>This example demonstrates several form design best practices:</p> <ol> <li>Clear Labels: Each input has a descriptive label</li> <li>Input Validation: Validates both presence and format of inputs</li> <li>Field Constraints: Restricts age field to numbers only</li> <li>Visual Feedback: Shows errors in red, success in green</li> <li>Disabled States: Submit button appears disabled until agreement is checked</li> <li>Consistent Styling: Maintains consistent colors and spacing</li> </ol>"},{"location":"examples/form/#full-example-code","title":"Full Example Code","text":"<p>See the complete input_form_example.py file in the examples directory.</p> <pre><code># See full implementation in examples/input_form_example.py\n</code></pre>"},{"location":"examples/game/","title":"Simple Game Example","text":"<p>This example demonstrates how to create a complete clicker game using multiple PygameUI components working together in a cohesive application.</p> <p></p>"},{"location":"examples/game/#features-demonstrated","title":"Features Demonstrated","text":"<ul> <li>Multiple screens: Main game, shop, and settings screens</li> <li>State management: Tracking game state across different screens</li> <li>Complex UI interactions: Handling multiple interactive elements together</li> <li>Dialog windows: Creating confirmation dialogs</li> <li>Theme switching: Changing the UI appearance dynamically</li> <li>Animation effects: Adding visual feedback to user actions</li> <li>Helper functions: Using functions to organize UI logic for cleaner code</li> </ul>"},{"location":"examples/game/#application-structure","title":"Application Structure","text":"<p>The game is organized into three main screens:</p> <ol> <li>Main Screen: Game title, score display, clicker button, navigation buttons</li> <li>Shop Screen: Upgrades that can be purchased with points</li> <li>Settings Screen: Theme selection and game reset options</li> </ol>"},{"location":"examples/game/#code-organization","title":"Code Organization","text":"<p>The code follows this organization pattern: <pre><code>1. Initialization\n2. Component Definition (by screen)\n3. Game Loop with:\n   - Event handling\n   - Update phase (components)\n   - Draw phase (components)\n   - Screen-specific logic\n</code></pre></p>"},{"location":"examples/game/#key-implementation-concepts","title":"Key Implementation Concepts","text":""},{"location":"examples/game/#screen-management","title":"Screen Management","text":"<p>The example uses a simple screen management system with a state variable:</p> <pre><code># UI State\ncurrent_screen = \"main\"  # \"main\", \"shop\", \"settings\"\n\n# In the game loop\nif current_screen == \"main\":\n    # Update and draw main screen elements\nelif current_screen == \"shop\":\n    # Update and draw shop screen elements\nelif current_screen == \"settings\":\n    # Update and draw settings screen elements\n</code></pre>"},{"location":"examples/game/#game-state-management","title":"Game State Management","text":"<p>The game keeps track of the player's progress in a dictionary:</p> <pre><code># Game state\ngame_state = {\n    \"score\": 0,\n    \"click_value\": 1,\n    \"passive_income\": 0,\n    \"last_tick\": time.time(),\n    \"background_color\": (30, 30, 50)\n}\n</code></pre>"},{"location":"examples/game/#shop-implementation","title":"Shop Implementation","text":"<p>The shop uses a data-driven approach for upgrades:</p> <pre><code># Shop items\nshop_items = [\n    {\n        \"name\": \"Better Clicker\",\n        \"description\": \"Increases click value by 1\",\n        \"cost\": 10,\n        \"effect\": lambda state: state.update(click_value=state[\"click_value\"] + 1),\n        \"button\": pygameui.Button(...)\n    },\n    # More items...\n]\n</code></pre>"},{"location":"examples/game/#theme-switching","title":"Theme Switching","text":"<p>The settings screen implements theme switching with a dropdown menu:</p> <pre><code>theme_options = [\"Dark Blue\", \"Dark Gray\", \"Dark Purple\", \"Dark Green\"]\ntheme_colors = {\n    \"Dark Blue\": (30, 30, 50),\n    \"Dark Gray\": (40, 40, 40),\n    \"Dark Purple\": (40, 30, 50),\n    \"Dark Green\": (30, 50, 30)\n}\n\n# In the update loop:\nselected_theme = theme_dropdown.get_selected_option()\nif selected_theme in theme_colors:\n    game_state[\"background_color\"] = theme_colors[selected_theme]\n</code></pre>"},{"location":"examples/game/#dialog-implementation","title":"Dialog Implementation","text":"<p>The confirmation dialog is implemented using layered components:</p> <pre><code># Reset confirmation dialog\nreset_confirm_bg = pygameui.Element(...)  # Background\nreset_confirm_text = pygameui.Text(...)   # Message\nreset_confirm_yes = pygameui.Button(...)  # Confirm button\nreset_confirm_no = pygameui.Button(...)   # Cancel button\n\n# In the game loop, when dialog should show:\nreset_confirm_bg.draw(screen)\nreset_confirm_text.draw(screen)\nreset_confirm_yes.draw(screen)\nreset_confirm_no.draw(screen)\n</code></pre>"},{"location":"examples/game/#animation-effects","title":"Animation Effects","text":"<p>The game adds simple animation when the user clicks the main button:</p> <pre><code>if clicker_button.was_clicked():\n    game_state[\"score\"] += game_state[\"click_value\"]\n    # Add a little animation\n    clicker_button.flow(\n        start_position=clicker_button.get_position(),\n        end_position=(clicker_button.get_position()[0], clicker_button.get_position()[1] + 10),\n        time=100,\n        loop=False\n    )\n    clicker_button.set_animate(True)\n</code></pre>"},{"location":"examples/game/#best-practices-demonstrated","title":"Best Practices Demonstrated","text":"<ol> <li>Component Organization: Organizing UI components by screen/functionality</li> <li>State Management: Maintaining game state separately from UI components</li> <li>Consistent Styling: Using similar colors and styling for related elements</li> <li>User Feedback: Providing visual feedback for user actions</li> <li>Modular Design: Using dictionaries and data structures for scalable content</li> <li>Proper Event Handling: Passing events to all active components</li> <li>Dialog Layering: Creating proper Z-ordering for overlapping elements</li> </ol>"},{"location":"examples/game/#full-example-code","title":"Full Example Code","text":"<p>See the complete simple_game.py file in the examples directory.</p>"}]}